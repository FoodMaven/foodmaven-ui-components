{"version":3,"file":"fm-ui-components.js.map","sources":["ng://fm-ui-components/lib/models/characteristic.model.ts","ng://fm-ui-components/lib/characteristics-input/characteristics-input.component.ts","ng://fm-ui-components/lib/fm-ui-components.module.ts"],"sourcesContent":["import { Value } from './value.model';\n\nexport enum CharacteristicTypes {\n  SINGLE_GROUP = 'single group',\n  IMPLICIT = 'implicit',\n  SCALE = 'scale',\n  MULTI_GROUP = 'multi group'\n}\n\nexport interface Characteristic {\n  id: number;\n  name: string;\n  desc: string;\n  categoryId: number;\n  type: CharacteristicTypes;\n  values: Value[];\n  aliases: CharacteristicAlias[];\n}\n\nexport interface CharacteristicsByType {\n  implicit: Characteristic[];\n  scaled: Characteristic[];\n  singleGroup: Characteristic[];\n  multiGroup: Characteristic[];\n}\n\nexport interface CharacteristicAlias {\n  id: number;\n  characteristicId: number;\n  name: string;\n}\n\nexport interface IdentifiedCharacteristic {\n  externalCharacteristicId: string | undefined | null;\n  name: string;\n  value: string;\n  type: string;\n}\n","import { Component, ElementRef, Input, OnChanges, SimpleChanges, ViewChild, ViewEncapsulation } from '@angular/core';\nimport { FormControl } from '@angular/forms';\nimport { Observable } from 'rxjs';\nimport { map, startWith } from 'rxjs/operators';\nimport { MatAutocompleteSelectedEvent, MatSnackBar } from '@angular/material';\nimport { Characteristic, CharacteristicsByType, CharacteristicTypes, IdentifiedCharacteristic } from '../models/characteristic.model';\nimport { Value } from '../models/value.model';\n\ninterface ValueWithCharacteristic {\n  characteristic: Characteristic;\n  value: Value;\n}\n\n@Component({\n  selector: 'fm-characteristics-input',\n  templateUrl: './characteristics-input.component.html',\n  styleUrls: ['./characteristics-input.component.scss', '../../styles.scss'],\n  encapsulation: ViewEncapsulation.None\n})\nexport class CharacteristicsInputComponent implements OnChanges {\n  @Input() allCharacteristics!: CharacteristicsByType;\n  @Input() identifiedCharacteristics!: IdentifiedCharacteristic[];\n\n  @ViewChild('charInput') characteristicInput!: ElementRef<HTMLInputElement>;\n\n  characteristicFormControl = new FormControl('');\n  characteristicValueOptions: ValueWithCharacteristic[] = [];\n  selectedOptions: ValueWithCharacteristic[] = [];\n  filteredOptions: Observable<string[] | ValueWithCharacteristic[]>;\n\n  constructor(private snackBar: MatSnackBar) {\n    this.filteredOptions = this.characteristicFormControl.valueChanges.pipe(\n      startWith(null),\n      map((filterString: string | null) => {\n        return filterString ? this._filter(filterString) : this._filterSelected();\n      })\n    );\n  }\n\n  ngOnChanges(changes: SimpleChanges) {\n    if (changes.allCharacteristics && changes.allCharacteristics.currentValue) {\n      this.selectedOptions = [];\n      this.characteristicValueOptions = this.extractValueCharacteristicPairs(changes.allCharacteristics.currentValue);\n    }\n\n    if (changes.identifiedCharacteristics && changes.identifiedCharacteristics.currentValue) {\n      this.selectedOptions = [];\n\n      const identifiedCharacteristics: IdentifiedCharacteristic[] = changes.identifiedCharacteristics.currentValue;\n\n      identifiedCharacteristics.forEach(identifiedChar => {\n        const match = this.characteristicValueOptions.find((char) => {\n          return char.characteristic.name === identifiedChar.name && char.value.name === identifiedChar.value;\n        });\n\n        if (match) {\n          this.selectedOptions.push(match);\n        }\n      });\n    }\n  }\n\n  extractValueCharacteristicPairs(characteristics: CharacteristicsByType): ValueWithCharacteristic[] {\n    const allCharacteristics = [\n      ...characteristics.implicit,\n      ...characteristics.scaled,\n      ...characteristics.singleGroup,\n      ...characteristics.multiGroup\n    ];\n    const valuesWithCharacteristics: ValueWithCharacteristic[] = [];\n\n    allCharacteristics.forEach(char => {\n      char.values.forEach(val => {\n        valuesWithCharacteristics.push({\n          characteristic: char,\n          value: val\n        });\n      });\n    });\n\n    return valuesWithCharacteristics;\n  }\n\n  removeValueFromSelected(charValue: ValueWithCharacteristic): void {\n    const index = this.selectedOptions.indexOf(charValue);\n\n    if (index >= 0) {\n      this.selectedOptions.splice(index, 1);\n      this.characteristicFormControl.setValue(null);   // manually trigger valueChange so value is repopulated in filtered results\n    }\n  }\n\n  onValueSelected(event: MatAutocompleteSelectedEvent): void {\n    const selected = event.option.value;\n    const valid = this.validateSelectedValue(selected);\n\n\n    if (valid) {\n      this.selectedOptions.push(selected);\n      this.characteristicInput.nativeElement.value = '';\n      this.characteristicFormControl.setValue(null);\n    } else {\n      this.snackBar.open(\n        `A value from ${selected.characteristic.name} has already been selected`,\n        undefined,\n        {\n          duration: 3000,\n          panelClass: 'snackbar-error'\n        }\n      );\n    }\n\n  }\n\n  private validateSelectedValue(charValue: ValueWithCharacteristic): boolean {\n    let valid = true;\n\n    switch (charValue.characteristic.type) {\n      case CharacteristicTypes.SINGLE_GROUP: {\n        this.selectedOptions.forEach(option => {\n          if (charValue.characteristic.values.indexOf(option.value) >= 0) {\n            valid = false;\n          }\n        });\n        break;\n      }\n\n      case CharacteristicTypes.SCALE: {\n        this.selectedOptions.forEach(option => {\n          if (charValue.characteristic.values.indexOf(option.value) >= 0) {\n            valid = false;\n          }\n        });\n        break;\n      }\n    }\n\n    return valid;\n  }\n\n  private _filter(value: string): ValueWithCharacteristic[] {\n    if (typeof value === 'string') {\n      const filterValue = value.toLowerCase();\n\n      return this.characteristicValueOptions.filter(characteristicValue => {\n        const joinedName = characteristicValue.characteristic.name + ' ' + characteristicValue.value.name.toLowerCase();\n\n        return joinedName.toLowerCase().indexOf(filterValue) >= 0\n          && this.selectedOptions.indexOf(characteristicValue) < 0;\n      });\n    }\n\n    return [];\n  }\n\n  private _filterSelected(): ValueWithCharacteristic[] {\n    return this.characteristicValueOptions.filter(characteristicValue => {\n      return this.selectedOptions.indexOf(characteristicValue) < 0;\n    });\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CharacteristicsInputComponent } from './characteristics-input/characteristics-input.component';\nimport {\n  MAT_CHIPS_DEFAULT_OPTIONS,\n  MatAutocompleteModule,\n  MatChipsModule, MatFormFieldModule, MatIconModule,\n  MatSelectModule,\n  MatSnackBarModule\n} from '@angular/material';\nimport { COMMA, ENTER } from '@angular/cdk/keycodes';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [CharacteristicsInputComponent],\n  imports: [\n    BrowserAnimationsModule,\n    MatFormFieldModule,\n    MatAutocompleteModule,\n    MatSnackBarModule,\n    MatChipsModule,\n    MatIconModule,\n    MatSelectModule,\n    FormsModule,\n    ReactiveFormsModule,\n  ],\n  exports: [CharacteristicsInputComponent],\n  providers: [\n    {\n      provide: MAT_CHIPS_DEFAULT_OPTIONS,\n      useValue: {\n        separatorKeyCodes: [ENTER, COMMA]\n      }\n    }\n  ]\n})\nexport class FmUiComponentsModule { }\n"],"names":[],"mappings":"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"}
